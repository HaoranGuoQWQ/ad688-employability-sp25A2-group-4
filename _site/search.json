[
  {
    "objectID": "research_introduction.html",
    "href": "research_introduction.html",
    "title": "Team 4 Research Introduction & Literature Review: AI vs. Non-AI Careers",
    "section": "",
    "text": "The rapid development of artificial intelligence is transforming the global job market. It is creating both opportunities and challenges for workers across various industries George ((2024a)). As AI-powered automation reshapes many traditional jobs, it is important for us to understand the distinctions between AI and non-AI careers in preparing for our career planning. In 2024, AI integration continues to accelerate, influencing both skill requirements and wage structures, while non-AI careers remain essential in some areas which requires human creativity and hands-on expertise George ((2024b)). The rise of generative AI has intensified discussions on job displacement as well as the ethical implications of AI-driven employment Idrisi, Geteye, and Shanmugasundaram ((2024)).\nThis research aims to explore key differences between AI and non-AI careers in terms of job security, salary growth, required skills, and future demand, etc. By analyzing these trends, the study will provide valuable insights into navigating career choices in an increasingly AI-driven world."
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "ad688-employability-sp25A1-group-4",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\n\n2 Exploratory Data Analysis & Visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create average salary column using SALARY_FROM and SALARY_TO\ndf['avg_salary'] = (df['SALARY_FROM'] + df['SALARY_TO']) / 2\n\nplt.figure(figsize=(10, 6))\nsns.histplot(df['avg_salary'].dropna(), bins=50, kde=True)\nplt.title(\"Average Salary Distribution\")\nplt.xlabel(\"Average Salary\")\nplt.ylabel(\"Count\")\nplt.show()\n\n\n\n\n\n\n\n\n\ntop_locations = df['STATE_NAME'].value_counts().head(10)\n\nplt.figure(figsize=(12, 6))\nsns.barplot(x=top_locations.values, y=top_locations.index)\nplt.title(\"Top 10 Job Postings by State\")\nplt.xlabel(\"Number of Postings\")\nplt.ylabel(\"State\")\nplt.show()"
  },
  {
    "objectID": "AD688_GA2_C.html",
    "href": "AD688_GA2_C.html",
    "title": "Data Analysis",
    "section": "",
    "text": "import pandas as pd\ndf = pd.read_csv('lightcast_job_postings.csv')\n\n\n#4.1\ncolumns = df.columns.tolist()\nfor i in range(0, len(columns), 5):\n    print(columns[i:i+5])\n\n['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES', 'POSTED']\n['EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL']\n['ACTIVE_URLS', 'ACTIVE_SOURCES_INFO', 'TITLE_RAW', 'BODY', 'MODELED_EXPIRED']\n['MODELED_DURATION', 'COMPANY', 'COMPANY_NAME', 'COMPANY_RAW', 'COMPANY_IS_STAFFING']\n['EDUCATION_LEVELS', 'EDUCATION_LEVELS_NAME', 'MIN_EDULEVELS', 'MIN_EDULEVELS_NAME', 'MAX_EDULEVELS']\n['MAX_EDULEVELS_NAME', 'EMPLOYMENT_TYPE', 'EMPLOYMENT_TYPE_NAME', 'MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE']\n['IS_INTERNSHIP', 'SALARY', 'REMOTE_TYPE', 'REMOTE_TYPE_NAME', 'ORIGINAL_PAY_PERIOD']\n['SALARY_TO', 'SALARY_FROM', 'LOCATION', 'CITY', 'CITY_NAME']\n['COUNTY', 'COUNTY_NAME', 'MSA', 'MSA_NAME', 'STATE']\n['STATE_NAME', 'COUNTY_OUTGOING', 'COUNTY_NAME_OUTGOING', 'COUNTY_INCOMING', 'COUNTY_NAME_INCOMING']\n['MSA_OUTGOING', 'MSA_NAME_OUTGOING', 'MSA_INCOMING', 'MSA_NAME_INCOMING', 'NAICS2']\n['NAICS2_NAME', 'NAICS3', 'NAICS3_NAME', 'NAICS4', 'NAICS4_NAME']\n['NAICS5', 'NAICS5_NAME', 'NAICS6', 'NAICS6_NAME', 'TITLE']\n['TITLE_NAME', 'TITLE_CLEAN', 'SKILLS', 'SKILLS_NAME', 'SPECIALIZED_SKILLS']\n['SPECIALIZED_SKILLS_NAME', 'CERTIFICATIONS', 'CERTIFICATIONS_NAME', 'COMMON_SKILLS', 'COMMON_SKILLS_NAME']\n['SOFTWARE_SKILLS', 'SOFTWARE_SKILLS_NAME', 'ONET', 'ONET_NAME', 'ONET_2019']\n['ONET_2019_NAME', 'CIP6', 'CIP6_NAME', 'CIP4', 'CIP4_NAME']\n['CIP2', 'CIP2_NAME', 'SOC_2021_2', 'SOC_2021_2_NAME', 'SOC_2021_3']\n['SOC_2021_3_NAME', 'SOC_2021_4', 'SOC_2021_4_NAME', 'SOC_2021_5', 'SOC_2021_5_NAME']\n['LOT_CAREER_AREA', 'LOT_CAREER_AREA_NAME', 'LOT_OCCUPATION', 'LOT_OCCUPATION_NAME', 'LOT_SPECIALIZED_OCCUPATION']\n['LOT_SPECIALIZED_OCCUPATION_NAME', 'LOT_OCCUPATION_GROUP', 'LOT_OCCUPATION_GROUP_NAME', 'LOT_V6_SPECIALIZED_OCCUPATION', 'LOT_V6_SPECIALIZED_OCCUPATION_NAME']\n['LOT_V6_OCCUPATION', 'LOT_V6_OCCUPATION_NAME', 'LOT_V6_OCCUPATION_GROUP', 'LOT_V6_OCCUPATION_GROUP_NAME', 'LOT_V6_CAREER_AREA']\n['LOT_V6_CAREER_AREA_NAME', 'SOC_2', 'SOC_2_NAME', 'SOC_3', 'SOC_3_NAME']\n['SOC_4', 'SOC_4_NAME', 'SOC_5', 'SOC_5_NAME', 'LIGHTCAST_SECTORS']\n['LIGHTCAST_SECTORS_NAME', 'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3', 'NAICS_2022_3_NAME']\n['NAICS_2022_4', 'NAICS_2022_4_NAME', 'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6']\n['NAICS_2022_6_NAME']\n\n\n\n#4.2\ncolumns_to_drop = [\n    \"ID\", \"URL\", \"ACTIVE_URLS\", \"DUPLICATES\", \"LAST_UPDATED_TIMESTAMP\",\n    \"NAICS2\", \"NAICS3\", \"NAICS4\", \"NAICS5\", \"NAICS6\",\n    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n]\ndf.drop(columns=columns_to_drop, inplace=True)\n\n4.2: The above columns are to be dropped because they are not relevant in our analysis. For example, ID is not an insightful variable here because it entails little numerical value for our analysis (i.e. different IDs do not represent different meaningful characteristics for the posted job). Other variables such as NAICS4 or NAICS5 will be deleted because they are out-dated.\n\npd.DataFrame(df.columns, columns=[\"Remaining Columns\"])\n\n\n\n\n\n\n\n\nRemaining Columns\n\n\n\n\n0\nLAST_UPDATED_DATE\n\n\n1\nPOSTED\n\n\n2\nEXPIRED\n\n\n3\nDURATION\n\n\n4\nSOURCE_TYPES\n\n\n...\n...\n\n\n113\nNAICS_2022_4_NAME\n\n\n114\nNAICS_2022_5\n\n\n115\nNAICS_2022_5_NAME\n\n\n116\nNAICS_2022_6\n\n\n117\nNAICS_2022_6_NAME\n\n\n\n\n118 rows × 1 columns\n\n\n\nDropping irrelavant columns will make our database more compact and will save us cognitive efforts when we are interpreting graphs, as now we don’t need to interpret the bars or plots for those irrelavant columns. We can therefore focus on more meaningful columns such as the SALARY or industry type.\n\n#4.4\nimport missingno as msno\nimport matplotlib.pyplot as plt\n\nmsno.heatmap(df)\nplt.title(\"Missing Values Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\n\n# Drop columns with more than 50% missing values\nkeep_columns = [\"INDUSTRY\", \"SALARY\"]\nmissing_percent = df.isnull().mean()\ncols_to_drop = missing_percent[\n    (missing_percent &gt; 0.5) & (~missing_percent.index.isin(keep_columns))\n].index\ndf.drop(columns=cols_to_drop, inplace=True)\n\n\n# Fill missing values\nfor col in df.columns:\n    if df[col].dtype in ['int64', 'float64']:\n        df[col] = df[col].fillna(df[col].median())\n    elif df[col].dtype == 'object':\n        df[col] = df[col].fillna(\"Unknown\")\n\nHere we are handling the missing values in the INDUSTRY, SALARY, NAICS2_NAME, and other columns. We drop all columns with &gt;50% missing values, and for the salary and the NAICS2_NAME (containing industry names) columns, we fill NAs with the median value and ‘Unknown’, respectively.\n\ndf.head(3)\n\n\n\n\n\n\n\n\nLAST_UPDATED_DATE\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nTITLE_RAW\nBODY\nMODELED_EXPIRED\nMODELED_DURATION\n...\nNAICS_2022_2\nNAICS_2022_2_NAME\nNAICS_2022_3\nNAICS_2022_3_NAME\nNAICS_2022_4\nNAICS_2022_4_NAME\nNAICS_2022_5\nNAICS_2022_5_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n2024-09-06\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\nEnterprise Analyst (II-III)\n31-May-2024\\n\\nEnterprise Analyst (II-III)\\n\\n...\n2024-06-08\n6.0\n...\n44\nRetail Trade\n441\nMotor Vehicle and Parts Dealers\n4413\nAutomotive Parts, Accessories, and Tire Retailers\n44133\nAutomotive Parts and Accessories Retailers\n441330\nAutomotive Parts and Accessories Retailers\n\n\n1\n2024-08-02\n2024-06-02\n2024-08-01\n18.0\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\nOracle Consultant - Reports (3592)\nOracle Consultant - Reports (3592)\\n\\nat SMX i...\n2024-08-01\n16.0\n...\n56\nAdministrative and Support and Waste Managemen...\n561\nAdministrative and Support Services\n5613\nEmployment Services\n56132\nTemporary Help Services\n561320\nTemporary Help Services\n\n\n2\n2024-09-06\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\nData Analyst\nTaking care of people is at the heart of every...\n2024-06-10\n8.0\n...\n52\nFinance and Insurance\n524\nInsurance Carriers and Related Activities\n5242\nAgencies, Brokerages, and Other Insurance Rela...\n52429\nOther Insurance Related Activities\n524291\nClaims Adjusting\n\n\n\n\n3 rows × 109 columns\n\n\n\n\n#4.5\ndf = df.drop_duplicates(subset=[\"TITLE\", \"COMPANY\", \"LOCATION\", \"POSTED\"], keep=\"first\")\n\n\nimport plotly.io as pio\npio.renderers.default = 'notebook'\n\n\n#5.1.1\nimport plotly.express as px\nindustry_counts = df[\"NAICS2_NAME\"].value_counts()\n\nfig = px.bar(industry_counts, \n             title=\"Job Postings by Industry\", \n             labels={'index': 'Industry', 'value': 'Number of Job Postings'},\n             text_auto=True)\nfig.show()\n\n        \n        \n        \n\n\n                            \n                                            \n\n\n5.1.1: The graph of job posting by industry is chosen because we need to know which industries are more ‘eager’ to hiring. This can guide job seekers about which industries to choose when deciding where to send their resumes. The graph shows that the Professional, Scientific, and Technical Services industry dominates in terms of job posted (with more than 22k jobs posted). This implies that more opportunities exist in that industry and job seekers should think about advancing their skills corresponding to the skill requirements in this industry.\n\n#5.1.2\nfig = px.box(df, \n             x=\"NAICS2_NAME\", \n             y=\"SALARY\", \n             title=\"Salary Distribution by Industry\",\n             labels={\"Industry\": \"Industry\", \"Salary\": \"Salary\"},\n             points=\"all\") \nfig.update_layout(xaxis_tickangle=-45)  \nfig.show()\n\n                            \n                                            \n\n\n\ndf.groupby(\"NAICS2_NAME\")[\"SALARY\"].mean().sort_values(ascending=False)\n\nNAICS2_NAME\nInformation                                                                 129838.706942\nProfessional, Scientific, and Technical Services                            122545.236573\nAccommodation and Food Services                                             121704.673684\nRetail Trade                                                                119727.348942\nManufacturing                                                               118032.224153\nFinance and Insurance                                                       117732.917823\nUtilities                                                                   116621.473846\nConstruction                                                                115786.905537\nManagement of Companies and Enterprises                                     114972.733209\nWholesale Trade                                                             113760.985653\nMining, Quarrying, and Oil and Gas Extraction                               113593.815152\nUnclassified Industry                                                       113440.233087\nTransportation and Warehousing                                              111254.506798\nAdministrative and Support and Waste Management and Remediation Services    110401.264970\nAgriculture, Forestry, Fishing and Hunting                                  109806.578947\nHealth Care and Social Assistance                                           109014.679035\nOther Services (except Public Administration)                               105049.230715\nReal Estate and Rental and Leasing                                          103524.830334\nArts, Entertainment, and Recreation                                         102223.296667\nEducational Services                                                         99009.963886\nPublic Administration                                                        92306.371459\nName: SALARY, dtype: float64\n\n\n5.1.2: In order to gain a deeper understanding about salaries of jobs in different industries, we need a box plot to show us the salary distributions for various industries. Results indicate that the mean salaries among all the industries are almost at the same level (around 100K). However, jobs in certain industries have the potential to reach substantially more salaries than the average. These industries include Administrative and Support and Waste Management and Remediation Services, Information, and Health Care and Social Assistance. Job seekers may want to look into these industries if they aspire to get higher salaries when they advance in their positions.\n\nfig = px.pie(df, names=\"REMOTE_TYPE_NAME\", title=\"Remote vs. On-Site Jobs\")\nfig.show()\n\n                            \n                                            \n\n\n5.1.3: The remost vs. on-site job chart enables us to know whether the jobs posted allow remote working or require on-site working. The data here does not allow us to see a bigger picture due to the 78.3% None value in the column, but from the remaining data we do see that 17% of jobs allow remote working. This can imply that remote work has gained its momentum, and that job seekers nowadays are faced with both opportunities and challenges brought by remote work. For the opportunities, workers now have more flexibility in working location and are no longer binded by physical offices, meaning that they will save time of daily commute and can have better work-life balance. The presence of AI and computer technology also facilitates remote working by enabling workers to work anywhere with internet connections. However, the downside of remote working is that social interactions among workers will decrease. Team spirits and cooperation will diminish when workers are not present in the same physical space. Future job seekers, as well as hiring companies, need to evaluate the ups and downs of this remote working trend in order to optimize work motivation."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "AD688_GS3.html",
    "href": "AD688_GS3.html",
    "title": "ad688-employability-sp25A1-group-4",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\n\nC:\\Users\\zxgz1\\AppData\\Local\\Temp\\ipykernel_60916\\2462282455.py:3: DtypeWarning: Columns (19,30) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(\"lightcast_job_postings.csv\")\n\n\n3 Skill Gap Analysis\n3.1 Team Skill Ratings\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nskills_data = {\n    \"Name\": [\"Haoran\", \"Junze\"],\n    \"Python\": [3, 2],\n    \"SQL\": [2, 3],\n    \"Machine Learning\": [4, 3],\n    \"Cloud Computing\": [3, 2],\n    \"Docker\": [2,2],\n    \"AWS\": [2,2],\n    \"communication\": [3,3],\n    \"leadership\": [2,2],\n    \"problem solving\": [4,3],\n    \"project management\": [4,3],\n    \"business process\": [2,3]\n}\ndf_skills = pd.DataFrame(skills_data).set_index(\"Name\")\ndf_skills\n\n\n\n\n\n\n\n\nPython\nSQL\nMachine Learning\nCloud Computing\nDocker\nAWS\ncommunication\nleadership\nproblem solving\nproject management\nbusiness process\n\n\nName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHaoran\n3\n2\n4\n3\n2\n2\n3\n2\n4\n4\n2\n\n\nJunze\n2\n3\n3\n2\n2\n2\n3\n2\n3\n3\n3\n\n\n\n\n\n\n\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(df_skills, annot=True, cmap=\"coolwarm\", linewidths=0.5)\nplt.title(\"Team Skill Levels\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom collections import Counter\n\nskill_series = df['SKILLS_NAME'].dropna().str.split(',')\nskill_series = skill_series.explode()\nskill_series = skill_series.str.strip().str.strip('\"').str.strip(\"'\").str.lower()\nskill_counts = Counter(skill_series)\ntop_skills = skill_counts.most_common(10)\n\nprint(\"Top 10 In-Demand Skills in Job Postings:\")\nfor skill, count in top_skills:\n    print(f\"{skill}: {count} postings\")\n\nTop 10 In-Demand Skills in Job Postings:\ncommunication: 30768 postings\ndata analysis: 26797 postings\nmanagement: 21274 postings\nsql (programming language): 20943 postings\nleadership: 17535 postings\nproblem solving: 16553 postings\noperations: 14684 postings\nproject management: 13609 postings\nbusiness process: 13203 postings\nbusiness requirements: 12977 postings\n\n\n\nimport numpy as np\nprogramming_skills = [\n    \"Python\", \"SQL\", \"Machine Learning\", \"Cloud Computing\", \"Docker\", \"AWS\"\n]\n\ndf_skills[\"Data Analysis\"] = df_skills[programming_skills].mean(axis=1).round().astype(int)\n\n\ndf_skills.columns = [col.lower().strip() for col in df_skills.columns]\n\nmarket_skills_raw = [\n    'communication', 'management', 'sql (programming language)',\n    'leadership', 'problem solving', 'operations',\n    'project management', 'business process', 'business requirements'\n]\n\nskill_mapping = {\n    'communication': 'communication',\n    'management': 'management',\n    'sql (programming language)': 'sql',\n    'leadership': 'leadership',\n    'problem solving': 'problem solving',\n    'operations': 'operations',\n    'project management': 'project management',\n    'business process': 'business process',\n    'business requirements': 'business requirements'\n}\n\nprogramming_skills = ['python', 'sql', 'machine learning', 'cloud computing', 'docker', 'aws']\ndf_skills['data analysis'] = df_skills[programming_skills].mean(axis=1).round().astype(int)\nmapped_skills = ['data analysis'] + [skill_mapping[s] for s in market_skills_raw if skill_mapping[s] in df_skills.columns]\nmapped_skills = list(dict.fromkeys(mapped_skills)) \nfor skill in mapped_skills:\n    if skill not in df_skills.columns:\n        df_skills[skill] = 0\n\n\ndf_skills = df_skills.loc[:, ~df_skills.columns.duplicated()]\n\nplt.figure(figsize=(12, 5))\nsns.heatmap(df_skills[mapped_skills], annot=True, cmap=\"YlGnBu\", linewidths=0.5)\nplt.title(\"Team Skill Levels vs Top Market Skills (No Duplicates)\")\nplt.xlabel(\"Skill\")\nplt.ylabel(\"Team Member\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n3.1.3 Improvement Plans Our analysis shows that Haoran is well-positioned in the job market due to his strong capability in data analysis, communication, problem solving, and project management. He is matching the job market’s requirements especially well in terms of problem solving and project management. For Junze, he is relatively good at communication and sql.\nIn terms of skills learning priorities, Haoran can position himself in the market even better by enhancing his skills in SQL and further developing his data analysis skills such as using python. For Junze, he should prioritize the learning of data analysis skills as they are highly demanded by the job market. Junze should also further his familiarity with SQL to better adapt to the job market.\nTo improve their skills, members in team 4 can utilize resources on the web (online tutorials, Coursera courses, etc.) to self-learn essential skills such as python and SQL. They can also consider taking more advanced courses in BU MET about data analysis and communication to improve corresponding skills.\nTo collaborate within the team, Haoran and Junze can teach each other and communicate the knowledge of python and SQL. They can share valuable information about their working experience or previous projects to deepen understanding about both the skills themselves and the job market as a whole."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ad688-employability-sp25A1-group-4",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]